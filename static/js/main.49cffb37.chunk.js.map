{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["window","chainIdExpected","styled","Paper","theme","typography","h3","padding","spacing","textAlign","color","palette","text","secondary","dataRefreshInterval","App","props","state","radioValue","progress","walletAccepted","alreadyVoted","totalYES","totalNO","totalVotes","votingEnded","baseState","_stateInterval","componentDidMount","contractAddress","contract_abi","abi","checkState","clearInterval","setInterval","componentWillUnmount","connected","setState","yourAddress","walletAddress","farm_contract","methods","getWalletStatus","call","then","result","getUserAnswer","getTotalAnswers","resultYes","parseInt","resultNO","started","onClick_Submit","openValue","toLowerCase","vote","send","from","response","catch","err","alert","handleRadioChange","event","_value","render","className","src","id","style","marginTop","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","darkTheme","createTheme","mode","primary","main","background","default","ReactDOM","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.49cffb37.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport { Button, CircularProgress, Grid, LinearProgress, Typography } from '@mui/material';\r\nimport { StandardTextFieldProps, TextField } from '@mui/material';\r\n\r\n\r\nimport Modal from '@mui/material/Modal';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nimport { AbiItem, TransactionReceipt } from 'ethereum-abi-types-generator';\r\n\r\nimport {ContractContext} from './assets/abi/voting-contract';\r\nimport Web3 from \"web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport copy from 'clipboard-copy';\r\nimport { formatEthFromWei, formatNumber } from './Formatters';\r\n\r\n//  Global setup Web3 Contract-Interaction\r\n//\r\nimport abi from \"./assets/abi/voting-contract.json\";\r\nimport TopAppBar from './components/AppBar';\r\nimport ConnectButton from './components/ConnectButton';\r\n\r\nimport taxMeterImg from './assets/img/tax-meter.png'\r\nimport {ReactComponent as TelegramIcon} from './assets/img/Telegram_logo.svg';\r\nimport SendIcon from '@mui/icons-material/Send';\r\n\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\n\r\n\r\n\r\n//const contractAddress: string = '0x6B4E65FB66F49655cBe8B4228319bB2c9E26aad8'; // release on mainnet\r\n//const contractAddress: string = '0x5372579dc14033a8B6Ed8aB4120781B33bBB711b'; // release on mainnet 2022\r\nconst contractAddress: string = '0x4af53af7784f1a67f72fd623EB0Ab8C79aDA3700'; // release on mainnet 2023\r\n\r\n//window.chainIdExpected = 97;\r\nwindow.chainIdExpected = 56;\r\n\r\n\r\ndeclare global {\r\n  interface Window {\r\n    dataRefreshInterval: number,\r\n    farm_contract: ContractContext;\r\n    web3: Web3;\r\n    walletConnectProvider: WalletConnectProvider,\r\n    ethereum: any;\r\n    contractAddress: string;\r\n    contract_abi: AbiItem[];\r\n    walletAddress: string;\r\n    connected: boolean;\r\n    refferalAddress: string; // the ref address that invited me\r\n    chainId: number;\r\n    chainIdExpected: number;\r\n    bnbPrice: number;\r\n  }\r\n}\r\n\r\ninterface AppProps {\r\n  style?: React.CSSProperties;\r\n}\r\n\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n  ...theme.typography.h3,\r\n  padding: theme.spacing(1),\r\n  textAlign: 'center',\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\nwindow.dataRefreshInterval = 3000;\r\n\r\nclass App extends React.Component<AppProps> {\r\n  \r\n  state = {\r\n    radioValue: \"\",\r\n    progress: false,\r\n    walletAccepted: false,\r\n    alreadyVoted: false,\r\n    totalYES: 0,\r\n    totalNO: 0,\r\n    totalVotes: 0,\r\n    votingEnded: false\r\n  }\r\n\r\n  baseState: any;\r\n  _stateInterval: any;\r\n\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n\r\n    this.baseState = this.state;\r\n    // properties\r\n\r\n\r\n  }\r\n\r\n\r\n  componentDidMount = () => { \r\n    window.contractAddress = contractAddress;\r\n    window.contract_abi = abi as AbiItem[];\r\n\r\n\r\n    this.checkState();\r\n\r\n    if(this._stateInterval){\r\n      clearInterval(this._stateInterval);\r\n    }\r\n    this._stateInterval = setInterval(this.checkState, window.dataRefreshInterval);\r\n\r\n    //this.setModalOpen();\r\n  }\r\n\r\n\r\n  componentWillUnmount = () => { \r\n    \r\n  }\r\n\r\n  \r\n  checkState = () => {  \r\n\r\n    if(window.connected !== true){\r\n      this.setState(this.baseState);\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      yourAddress: window.walletAddress,\r\n    });\r\n\r\n    window.farm_contract.methods.getWalletStatus(window.walletAddress).call().then((result: boolean) => {\r\n      //console.log(result);\r\n      this.setState({\r\n        walletAccepted: result\r\n      });\r\n    });\r\n\r\n\r\n    window.farm_contract.methods.getUserAnswer(window.walletAddress).call().then((result: string) => {\r\n      //console.log(result);\r\n      this.setState({\r\n        alreadyVoted: result != \"0\"\r\n      });\r\n    });\r\n\r\n    window.farm_contract.methods.getTotalAnswers(\"1\").call().then((resultYes: string) => {\r\n      //console.log(result);\r\n      let totalYES = parseInt(resultYes);\r\n\r\n\r\n      window.farm_contract.methods.getTotalAnswers(\"2\").call().then((resultNO: string) => {\r\n        //console.log(result);\r\n        let totalNO = parseInt(resultNO);\r\n\r\n        this.setState({\r\n          totalYES: (100 / (totalYES + totalNO) * totalYES),\r\n          totalNO: (100 / (totalYES + totalNO) * totalNO),\r\n          totalVotes: totalYES + totalNO\r\n        });\r\n\r\n        window.farm_contract.methods.started().call().then((started: boolean) => {\r\n          //console.log(result);\r\n\r\n          if(started == false && (totalYES + totalNO) > 0){\r\n            this.setState({\r\n              votingEnded: true\r\n            });\r\n          }\r\n\r\n\r\n        });\r\n        \r\n      });\r\n    });\r\n\r\n\r\n  }\r\n\r\n  onClick_Submit = () => {\r\n    //alert(this.state.radioValue)\r\n    let openValue = \"\";\r\n    if(this.state.radioValue.toLowerCase() == \"op1\"){\r\n      openValue = \"1\";\r\n    }else if(this.state.radioValue.toLowerCase() == \"op2\"){\r\n      openValue = \"2\";\r\n    }\r\n\r\n    this.setState({\r\n      progress: true\r\n    });\r\n\r\n    window.farm_contract.methods.vote(openValue).send({from: window.walletAddress}).then((response) => {\r\n      this.setState({\r\n        progress: false\r\n      });\r\n    }).catch((err:any) => {\r\n      alert(\"transaction failed\");\r\n      this.setState({\r\n        progress: false\r\n      });\r\n    });\r\n  }\r\n\r\n  handleRadioChange = (event: any, _value: string) => {\r\n    this.setState({\r\n      radioValue: _value\r\n    })\r\n  }\r\n\r\n  //  Main Layout\r\n  //\r\n  render = () => {\r\n    return (\r\n      <div>\r\n      <div className={\"wrapper\"}>\r\n        <img className={\"logo\"} src={\"https://piston-token.com/images/logo.svg\"}/>\r\n        <h2>PISTON TOKEN</h2>\r\n        <h3>final claim</h3>\r\n\r\n\r\n\r\n      </div>\r\n  <a id=\"details\"></a>\r\n      <div className={\"wrapper left\"} style={{marginTop: \"16px\"}}>\r\n      <h4>Hello and welcome to the PSTN info and claim page.</h4>\r\nAs you all know, PSTN has unfortunately come to and end.<br/><br/> We have run a vote amongst the holders via the website and Telegram group and here are the results: <br/><br/>\r\n\r\n81% of Voters decided that the best thing to do with the very little liquidity we had left ($45,000) was to invest it.<br/><br/> \r\nAs promised, we will do exactly this via two FX trading bots and every $5000 collected in profit from our investment will be placed in a pool.<br/><b> If you are a voter, and have not gained back your initial investment in PSTN, you have been white listed for this pool.</b><br/><br/>\r\n\r\nA claim button will appear from which you will be able to withdraw $50 per day per wallet. Users will be able to do this until the claim pool reaches zero. We will continue to fill the pool ideally monthly in increments of $5000 for the foreseeable future. \r\n\r\nWe will be able to track all users and the amount each person is entitled to. Once we are down to the last $45,000 to give back, we will release the full $45,000 in one transaction thus bringing all users to break even giving a clear and final end to the project.\r\n\r\nThe next steps are to pull the liquidity and start the investment process. This will sell all tokens and bring the chart to $0. It is the only way to pull out the money remaining in this project. Once this is done, the steps explained above will start.\r\n<br/><br/>\r\nThank you for being a part of the Piston Project\r\n      </div>\r\n\r\n      <div className={\"wrapper left\"} style={{marginTop: \"16px\"}}>\r\n      <h4>Roadmap</h4>\r\n       \r\n          <p>✅ pause trading</p>\r\n          <p>✅ voting</p>\r\n          <p>✅ setup tradingbots</p>\r\n          <p>➡️ pull out the remaining liquidity</p>\r\n          <p>📆 start trading</p>\r\n          <p>📆 publish claim dapp</p>\r\n      \r\n      </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport amber from '@mui/material/colors/amber'\r\n\r\nimport { ThemeProvider, useTheme, createTheme } from '@mui/material/styles';\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: 'light',\r\n    primary: {\r\n      main: '#FFFFFF',\r\n    },\r\n    secondary: {\r\n      main: '#193d7d',\r\n    },\r\n    background: {\r\n      default: \"#FFFFFF\"\r\n    }\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <App />\r\n      </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}